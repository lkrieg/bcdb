#!/bin/bash

# Very basic build configuration script but it does the job at least for now.
# Requires ldconfig for library checks. Pass --no-debug for production mode.
# TODO: Update linker flags depending on enabled features
# TODO: Fallback for systems without ldconfig

SRC="etc/config.h.in"
DST="src/config.h"

usage()
{
cat << EOF
Usage: ./configure [--no-debug] [--no-pthread] [--no-zlib]

  --no-debug      Disables all runtime debugging features
  --no-pthread    Disables multi-threading support
  --no-zlib       Disables optional data compression
EOF
}

main()
{
	local use_debug="yes"
	local use_pthread="no"
	local use_zlib="no"

	# Make sure the source file and ldconfig are available
	test -f "${SRC}"    || error "Header '${SRC}' missing."
	prereq "ldconfig"   || error "ldconfig not installed."


	# Check linker searchpaths for libraries
	exists "libpthread" && use_pthread="yes"
	exists "libz"       && use_zlib="yes"

	# Command-line arguments
	while test $# -gt 0; do
		case "$1" in
		--no-debug)   use_debug="no"   ;;
		--no-pthread) use_pthread="no" ;;
		--no-zlib)    use_zlib="no"    ;;
		*)            usage; exit 0    ;;
		esac
		shift
	done

	# The prompt interferes with automated unit testing
	# prompt "Enable debug mode?" && use_debug="yes"

	info "[CFG] Checking for debug...${use_debug}"
	info "[CFG] Checking for pthread...${use_pthread}"
	info "[CFG] Checking for zlib...${use_zlib}"

	# Process input file
	cp "${SRC}" "${DST}"

	define "DEBUG"         "${use_debug}"
	define "HAVE_PTHREAD"  "${use_pthread}"
	define "HAVE_ZLIB"     "${use_zlib}"

	printf "[CFG] Configuration successfull.\n"
	return 0
}

prereq()
{
	command -v ${1} >/dev/null
	return ${?}
}

exists()
{
	ldconfig -p | grep "${1}\.so" >/dev/null
	return ${?}
}

define()
{
	case "${2}" in
	yes) sed -i "s/undef ${1}/define ${1}/g" "${DST}" ;;
	*)   sed -i "s/define ${1}/undef ${1}/g" "${DST}" ;;
	esac
}

prompt()
{
	read -p "${1} [y/N] " ch
	case "${ch}" in
	y|Y) return 0 ;;
	*)   return 1 ;;
	esac
}

error()
{
	info "[CFG] Error: ${1}"
	exit 1
}

info()
{
	printf "${1}\n"
}

main $@
